# source: http://localhost:4466
# timestamp: Mon May 27 2019 22:49:54 GMT-0700 (Pacific Daylight Time)

type AggregateItem {
  count: Int!
}

type AggregateMultiLang {
  count: Int!
}

type AggregatePokemon {
  count: Int!
}

type AggregatePokemonBaseStats {
  count: Int!
}

type AggregatePokemonSkill {
  count: Int!
}

type AggregatePokemonType {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

type Item implements Node {
  id: ID!
  pokedexNumber: Int!
  nameSearch: String!
  name(where: MultiLangWhereInput): MultiLang!
}

"""A connection to a list of items."""
type ItemConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ItemEdge]!
  aggregate: AggregateItem!
}

input ItemCreateInput {
  pokedexNumber: Int!
  nameSearch: String!
  name: MultiLangCreateOneInput!
}

"""An edge in a connection."""
type ItemEdge {
  """The item at the end of the edge."""
  node: Item!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ItemOrderByInput {
  id_ASC
  id_DESC
  pokedexNumber_ASC
  pokedexNumber_DESC
  nameSearch_ASC
  nameSearch_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type ItemPreviousValues {
  id: ID!
  pokedexNumber: Int!
  nameSearch: String!
}

type ItemSubscriptionPayload {
  mutation: MutationType!
  node: Item
  updatedFields: [String!]
  previousValues: ItemPreviousValues
}

input ItemSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ItemSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ItemSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ItemSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ItemWhereInput
}

input ItemUpdateInput {
  pokedexNumber: Int
  nameSearch: String
  name: MultiLangUpdateOneRequiredInput
}

input ItemWhereInput {
  """Logical AND on all given filters."""
  AND: [ItemWhereInput!]

  """Logical OR on all given filters."""
  OR: [ItemWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ItemWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  pokedexNumber: Int

  """All values that are not equal to given value."""
  pokedexNumber_not: Int

  """All values that are contained in given list."""
  pokedexNumber_in: [Int!]

  """All values that are not contained in given list."""
  pokedexNumber_not_in: [Int!]

  """All values less than the given value."""
  pokedexNumber_lt: Int

  """All values less than or equal the given value."""
  pokedexNumber_lte: Int

  """All values greater than the given value."""
  pokedexNumber_gt: Int

  """All values greater than or equal the given value."""
  pokedexNumber_gte: Int
  nameSearch: String

  """All values that are not equal to given value."""
  nameSearch_not: String

  """All values that are contained in given list."""
  nameSearch_in: [String!]

  """All values that are not contained in given list."""
  nameSearch_not_in: [String!]

  """All values less than the given value."""
  nameSearch_lt: String

  """All values less than or equal the given value."""
  nameSearch_lte: String

  """All values greater than the given value."""
  nameSearch_gt: String

  """All values greater than or equal the given value."""
  nameSearch_gte: String

  """All values containing the given string."""
  nameSearch_contains: String

  """All values not containing the given string."""
  nameSearch_not_contains: String

  """All values starting with the given string."""
  nameSearch_starts_with: String

  """All values not starting with the given string."""
  nameSearch_not_starts_with: String

  """All values ending with the given string."""
  nameSearch_ends_with: String

  """All values not ending with the given string."""
  nameSearch_not_ends_with: String
  name: MultiLangWhereInput
}

input ItemWhereUniqueInput {
  id: ID
  pokedexNumber: Int
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type MultiLang {
  english: String!
  japanese: String!
  chinese: String!
}

"""A connection to a list of items."""
type MultiLangConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [MultiLangEdge]!
  aggregate: AggregateMultiLang!
}

input MultiLangCreateInput {
  english: String!
  japanese: String!
  chinese: String!
}

input MultiLangCreateOneInput {
  create: MultiLangCreateInput
}

"""An edge in a connection."""
type MultiLangEdge {
  """The item at the end of the edge."""
  node: MultiLang!

  """A cursor for use in pagination."""
  cursor: String!
}

enum MultiLangOrderByInput {
  english_ASC
  english_DESC
  japanese_ASC
  japanese_DESC
  chinese_ASC
  chinese_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type MultiLangPreviousValues {
  english: String!
  japanese: String!
  chinese: String!
}

type MultiLangSubscriptionPayload {
  mutation: MutationType!
  node: MultiLang
  updatedFields: [String!]
  previousValues: MultiLangPreviousValues
}

input MultiLangSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [MultiLangSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [MultiLangSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [MultiLangSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: MultiLangWhereInput
}

input MultiLangUpdateDataInput {
  english: String
  japanese: String
  chinese: String
}

input MultiLangUpdateInput {
  english: String
  japanese: String
  chinese: String
}

input MultiLangUpdateOneRequiredInput {
  create: MultiLangCreateInput
  update: MultiLangUpdateDataInput
  upsert: MultiLangUpsertNestedInput
}

input MultiLangUpsertNestedInput {
  update: MultiLangUpdateDataInput!
  create: MultiLangCreateInput!
}

input MultiLangWhereInput {
  """Logical AND on all given filters."""
  AND: [MultiLangWhereInput!]

  """Logical OR on all given filters."""
  OR: [MultiLangWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [MultiLangWhereInput!]
  english: String

  """All values that are not equal to given value."""
  english_not: String

  """All values that are contained in given list."""
  english_in: [String!]

  """All values that are not contained in given list."""
  english_not_in: [String!]

  """All values less than the given value."""
  english_lt: String

  """All values less than or equal the given value."""
  english_lte: String

  """All values greater than the given value."""
  english_gt: String

  """All values greater than or equal the given value."""
  english_gte: String

  """All values containing the given string."""
  english_contains: String

  """All values not containing the given string."""
  english_not_contains: String

  """All values starting with the given string."""
  english_starts_with: String

  """All values not starting with the given string."""
  english_not_starts_with: String

  """All values ending with the given string."""
  english_ends_with: String

  """All values not ending with the given string."""
  english_not_ends_with: String
  japanese: String

  """All values that are not equal to given value."""
  japanese_not: String

  """All values that are contained in given list."""
  japanese_in: [String!]

  """All values that are not contained in given list."""
  japanese_not_in: [String!]

  """All values less than the given value."""
  japanese_lt: String

  """All values less than or equal the given value."""
  japanese_lte: String

  """All values greater than the given value."""
  japanese_gt: String

  """All values greater than or equal the given value."""
  japanese_gte: String

  """All values containing the given string."""
  japanese_contains: String

  """All values not containing the given string."""
  japanese_not_contains: String

  """All values starting with the given string."""
  japanese_starts_with: String

  """All values not starting with the given string."""
  japanese_not_starts_with: String

  """All values ending with the given string."""
  japanese_ends_with: String

  """All values not ending with the given string."""
  japanese_not_ends_with: String
  chinese: String

  """All values that are not equal to given value."""
  chinese_not: String

  """All values that are contained in given list."""
  chinese_in: [String!]

  """All values that are not contained in given list."""
  chinese_not_in: [String!]

  """All values less than the given value."""
  chinese_lt: String

  """All values less than or equal the given value."""
  chinese_lte: String

  """All values greater than the given value."""
  chinese_gt: String

  """All values greater than or equal the given value."""
  chinese_gte: String

  """All values containing the given string."""
  chinese_contains: String

  """All values not containing the given string."""
  chinese_not_contains: String

  """All values starting with the given string."""
  chinese_starts_with: String

  """All values not starting with the given string."""
  chinese_not_starts_with: String

  """All values ending with the given string."""
  chinese_ends_with: String

  """All values not ending with the given string."""
  chinese_not_ends_with: String
}

type Mutation {
  createPokemon(data: PokemonCreateInput!): Pokemon!
  createPokemonSkill(data: PokemonSkillCreateInput!): PokemonSkill!
  createItem(data: ItemCreateInput!): Item!
  createPokemonBaseStats(data: PokemonBaseStatsCreateInput!): PokemonBaseStats!
  createPokemonType(data: PokemonTypeCreateInput!): PokemonType!
  createMultiLang(data: MultiLangCreateInput!): MultiLang!
  updatePokemon(data: PokemonUpdateInput!, where: PokemonWhereUniqueInput!): Pokemon
  updatePokemonSkill(data: PokemonSkillUpdateInput!, where: PokemonSkillWhereUniqueInput!): PokemonSkill
  updateItem(data: ItemUpdateInput!, where: ItemWhereUniqueInput!): Item
  updatePokemonType(data: PokemonTypeUpdateInput!, where: PokemonTypeWhereUniqueInput!): PokemonType
  deletePokemon(where: PokemonWhereUniqueInput!): Pokemon
  deletePokemonSkill(where: PokemonSkillWhereUniqueInput!): PokemonSkill
  deleteItem(where: ItemWhereUniqueInput!): Item
  deletePokemonType(where: PokemonTypeWhereUniqueInput!): PokemonType
  upsertPokemon(where: PokemonWhereUniqueInput!, create: PokemonCreateInput!, update: PokemonUpdateInput!): Pokemon!
  upsertPokemonSkill(where: PokemonSkillWhereUniqueInput!, create: PokemonSkillCreateInput!, update: PokemonSkillUpdateInput!): PokemonSkill!
  upsertItem(where: ItemWhereUniqueInput!, create: ItemCreateInput!, update: ItemUpdateInput!): Item!
  upsertPokemonType(where: PokemonTypeWhereUniqueInput!, create: PokemonTypeCreateInput!, update: PokemonTypeUpdateInput!): PokemonType!
  updateManyPokemons(data: PokemonUpdateInput!, where: PokemonWhereInput): BatchPayload!
  updateManyPokemonSkills(data: PokemonSkillUpdateInput!, where: PokemonSkillWhereInput): BatchPayload!
  updateManyItems(data: ItemUpdateInput!, where: ItemWhereInput): BatchPayload!
  updateManyPokemonBaseStatses(data: PokemonBaseStatsUpdateInput!, where: PokemonBaseStatsWhereInput): BatchPayload!
  updateManyPokemonTypes(data: PokemonTypeUpdateInput!, where: PokemonTypeWhereInput): BatchPayload!
  updateManyMultiLangs(data: MultiLangUpdateInput!, where: MultiLangWhereInput): BatchPayload!
  deleteManyPokemons(where: PokemonWhereInput): BatchPayload!
  deleteManyPokemonSkills(where: PokemonSkillWhereInput): BatchPayload!
  deleteManyItems(where: ItemWhereInput): BatchPayload!
  deleteManyPokemonBaseStatses(where: PokemonBaseStatsWhereInput): BatchPayload!
  deleteManyPokemonTypes(where: PokemonTypeWhereInput): BatchPayload!
  deleteManyMultiLangs(where: MultiLangWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Pokemon implements Node {
  id: ID!
  pokedexNumber: Int!
  nameSearch: String!
  name(where: MultiLangWhereInput): MultiLang!
  types(where: PokemonTypeWhereInput, orderBy: PokemonTypeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PokemonType!]
  base(where: PokemonBaseStatsWhereInput): PokemonBaseStats!
}

type PokemonBaseStats {
  hp: Float!
  attack: Float!
  defense: Float!
  spAttack: Float!
  spDefense: Float!
  speed: Float!
}

"""A connection to a list of items."""
type PokemonBaseStatsConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PokemonBaseStatsEdge]!
  aggregate: AggregatePokemonBaseStats!
}

input PokemonBaseStatsCreateInput {
  hp: Float!
  attack: Float!
  defense: Float!
  spAttack: Float!
  spDefense: Float!
  speed: Float!
}

input PokemonBaseStatsCreateOneInput {
  create: PokemonBaseStatsCreateInput
}

"""An edge in a connection."""
type PokemonBaseStatsEdge {
  """The item at the end of the edge."""
  node: PokemonBaseStats!

  """A cursor for use in pagination."""
  cursor: String!
}

enum PokemonBaseStatsOrderByInput {
  hp_ASC
  hp_DESC
  attack_ASC
  attack_DESC
  defense_ASC
  defense_DESC
  spAttack_ASC
  spAttack_DESC
  spDefense_ASC
  spDefense_DESC
  speed_ASC
  speed_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type PokemonBaseStatsPreviousValues {
  hp: Float!
  attack: Float!
  defense: Float!
  spAttack: Float!
  spDefense: Float!
  speed: Float!
}

type PokemonBaseStatsSubscriptionPayload {
  mutation: MutationType!
  node: PokemonBaseStats
  updatedFields: [String!]
  previousValues: PokemonBaseStatsPreviousValues
}

input PokemonBaseStatsSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [PokemonBaseStatsSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [PokemonBaseStatsSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PokemonBaseStatsSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PokemonBaseStatsWhereInput
}

input PokemonBaseStatsUpdateDataInput {
  hp: Float
  attack: Float
  defense: Float
  spAttack: Float
  spDefense: Float
  speed: Float
}

input PokemonBaseStatsUpdateInput {
  hp: Float
  attack: Float
  defense: Float
  spAttack: Float
  spDefense: Float
  speed: Float
}

input PokemonBaseStatsUpdateOneRequiredInput {
  create: PokemonBaseStatsCreateInput
  update: PokemonBaseStatsUpdateDataInput
  upsert: PokemonBaseStatsUpsertNestedInput
}

input PokemonBaseStatsUpsertNestedInput {
  update: PokemonBaseStatsUpdateDataInput!
  create: PokemonBaseStatsCreateInput!
}

input PokemonBaseStatsWhereInput {
  """Logical AND on all given filters."""
  AND: [PokemonBaseStatsWhereInput!]

  """Logical OR on all given filters."""
  OR: [PokemonBaseStatsWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PokemonBaseStatsWhereInput!]
  hp: Float

  """All values that are not equal to given value."""
  hp_not: Float

  """All values that are contained in given list."""
  hp_in: [Float!]

  """All values that are not contained in given list."""
  hp_not_in: [Float!]

  """All values less than the given value."""
  hp_lt: Float

  """All values less than or equal the given value."""
  hp_lte: Float

  """All values greater than the given value."""
  hp_gt: Float

  """All values greater than or equal the given value."""
  hp_gte: Float
  attack: Float

  """All values that are not equal to given value."""
  attack_not: Float

  """All values that are contained in given list."""
  attack_in: [Float!]

  """All values that are not contained in given list."""
  attack_not_in: [Float!]

  """All values less than the given value."""
  attack_lt: Float

  """All values less than or equal the given value."""
  attack_lte: Float

  """All values greater than the given value."""
  attack_gt: Float

  """All values greater than or equal the given value."""
  attack_gte: Float
  defense: Float

  """All values that are not equal to given value."""
  defense_not: Float

  """All values that are contained in given list."""
  defense_in: [Float!]

  """All values that are not contained in given list."""
  defense_not_in: [Float!]

  """All values less than the given value."""
  defense_lt: Float

  """All values less than or equal the given value."""
  defense_lte: Float

  """All values greater than the given value."""
  defense_gt: Float

  """All values greater than or equal the given value."""
  defense_gte: Float
  spAttack: Float

  """All values that are not equal to given value."""
  spAttack_not: Float

  """All values that are contained in given list."""
  spAttack_in: [Float!]

  """All values that are not contained in given list."""
  spAttack_not_in: [Float!]

  """All values less than the given value."""
  spAttack_lt: Float

  """All values less than or equal the given value."""
  spAttack_lte: Float

  """All values greater than the given value."""
  spAttack_gt: Float

  """All values greater than or equal the given value."""
  spAttack_gte: Float
  spDefense: Float

  """All values that are not equal to given value."""
  spDefense_not: Float

  """All values that are contained in given list."""
  spDefense_in: [Float!]

  """All values that are not contained in given list."""
  spDefense_not_in: [Float!]

  """All values less than the given value."""
  spDefense_lt: Float

  """All values less than or equal the given value."""
  spDefense_lte: Float

  """All values greater than the given value."""
  spDefense_gt: Float

  """All values greater than or equal the given value."""
  spDefense_gte: Float
  speed: Float

  """All values that are not equal to given value."""
  speed_not: Float

  """All values that are contained in given list."""
  speed_in: [Float!]

  """All values that are not contained in given list."""
  speed_not_in: [Float!]

  """All values less than the given value."""
  speed_lt: Float

  """All values less than or equal the given value."""
  speed_lte: Float

  """All values greater than the given value."""
  speed_gt: Float

  """All values greater than or equal the given value."""
  speed_gte: Float
}

"""A connection to a list of items."""
type PokemonConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PokemonEdge]!
  aggregate: AggregatePokemon!
}

input PokemonCreateInput {
  pokedexNumber: Int!
  nameSearch: String!
  name: MultiLangCreateOneInput!
  types: PokemonTypeCreateManyInput
  base: PokemonBaseStatsCreateOneInput!
}

"""An edge in a connection."""
type PokemonEdge {
  """The item at the end of the edge."""
  node: Pokemon!

  """A cursor for use in pagination."""
  cursor: String!
}

enum PokemonOrderByInput {
  id_ASC
  id_DESC
  pokedexNumber_ASC
  pokedexNumber_DESC
  nameSearch_ASC
  nameSearch_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type PokemonPreviousValues {
  id: ID!
  pokedexNumber: Int!
  nameSearch: String!
}

type PokemonSkill implements Node {
  id: ID!
  pokedexNumber: Int!
  name(where: MultiLangWhereInput): MultiLang!
  accuracy: Int!
  power: Int!
  pp: Int!
  type(where: PokemonTypeWhereInput): PokemonType!
}

"""A connection to a list of items."""
type PokemonSkillConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PokemonSkillEdge]!
  aggregate: AggregatePokemonSkill!
}

input PokemonSkillCreateInput {
  pokedexNumber: Int!
  accuracy: Int!
  power: Int!
  pp: Int!
  name: MultiLangCreateOneInput!
  type: PokemonTypeCreateOneInput!
}

"""An edge in a connection."""
type PokemonSkillEdge {
  """The item at the end of the edge."""
  node: PokemonSkill!

  """A cursor for use in pagination."""
  cursor: String!
}

enum PokemonSkillOrderByInput {
  id_ASC
  id_DESC
  pokedexNumber_ASC
  pokedexNumber_DESC
  accuracy_ASC
  accuracy_DESC
  power_ASC
  power_DESC
  pp_ASC
  pp_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type PokemonSkillPreviousValues {
  id: ID!
  pokedexNumber: Int!
  accuracy: Int!
  power: Int!
  pp: Int!
}

type PokemonSkillSubscriptionPayload {
  mutation: MutationType!
  node: PokemonSkill
  updatedFields: [String!]
  previousValues: PokemonSkillPreviousValues
}

input PokemonSkillSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [PokemonSkillSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [PokemonSkillSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PokemonSkillSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PokemonSkillWhereInput
}

input PokemonSkillUpdateInput {
  pokedexNumber: Int
  accuracy: Int
  power: Int
  pp: Int
  name: MultiLangUpdateOneRequiredInput
  type: PokemonTypeUpdateOneRequiredInput
}

input PokemonSkillWhereInput {
  """Logical AND on all given filters."""
  AND: [PokemonSkillWhereInput!]

  """Logical OR on all given filters."""
  OR: [PokemonSkillWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PokemonSkillWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  pokedexNumber: Int

  """All values that are not equal to given value."""
  pokedexNumber_not: Int

  """All values that are contained in given list."""
  pokedexNumber_in: [Int!]

  """All values that are not contained in given list."""
  pokedexNumber_not_in: [Int!]

  """All values less than the given value."""
  pokedexNumber_lt: Int

  """All values less than or equal the given value."""
  pokedexNumber_lte: Int

  """All values greater than the given value."""
  pokedexNumber_gt: Int

  """All values greater than or equal the given value."""
  pokedexNumber_gte: Int
  accuracy: Int

  """All values that are not equal to given value."""
  accuracy_not: Int

  """All values that are contained in given list."""
  accuracy_in: [Int!]

  """All values that are not contained in given list."""
  accuracy_not_in: [Int!]

  """All values less than the given value."""
  accuracy_lt: Int

  """All values less than or equal the given value."""
  accuracy_lte: Int

  """All values greater than the given value."""
  accuracy_gt: Int

  """All values greater than or equal the given value."""
  accuracy_gte: Int
  power: Int

  """All values that are not equal to given value."""
  power_not: Int

  """All values that are contained in given list."""
  power_in: [Int!]

  """All values that are not contained in given list."""
  power_not_in: [Int!]

  """All values less than the given value."""
  power_lt: Int

  """All values less than or equal the given value."""
  power_lte: Int

  """All values greater than the given value."""
  power_gt: Int

  """All values greater than or equal the given value."""
  power_gte: Int
  pp: Int

  """All values that are not equal to given value."""
  pp_not: Int

  """All values that are contained in given list."""
  pp_in: [Int!]

  """All values that are not contained in given list."""
  pp_not_in: [Int!]

  """All values less than the given value."""
  pp_lt: Int

  """All values less than or equal the given value."""
  pp_lte: Int

  """All values greater than the given value."""
  pp_gt: Int

  """All values greater than or equal the given value."""
  pp_gte: Int
  name: MultiLangWhereInput
  type: PokemonTypeWhereInput
}

input PokemonSkillWhereUniqueInput {
  id: ID
  pokedexNumber: Int
}

type PokemonSubscriptionPayload {
  mutation: MutationType!
  node: Pokemon
  updatedFields: [String!]
  previousValues: PokemonPreviousValues
}

input PokemonSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [PokemonSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [PokemonSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PokemonSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PokemonWhereInput
}

type PokemonType implements Node {
  id: ID!
  english: String!
  chinese: String!
  japanese: String!
}

"""A connection to a list of items."""
type PokemonTypeConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PokemonTypeEdge]!
  aggregate: AggregatePokemonType!
}

input PokemonTypeCreateInput {
  english: String!
  chinese: String!
  japanese: String!
}

input PokemonTypeCreateManyInput {
  create: [PokemonTypeCreateInput!]
  connect: [PokemonTypeWhereUniqueInput!]
}

input PokemonTypeCreateOneInput {
  create: PokemonTypeCreateInput
  connect: PokemonTypeWhereUniqueInput
}

"""An edge in a connection."""
type PokemonTypeEdge {
  """The item at the end of the edge."""
  node: PokemonType!

  """A cursor for use in pagination."""
  cursor: String!
}

enum PokemonTypeOrderByInput {
  id_ASC
  id_DESC
  english_ASC
  english_DESC
  chinese_ASC
  chinese_DESC
  japanese_ASC
  japanese_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type PokemonTypePreviousValues {
  id: ID!
  english: String!
  chinese: String!
  japanese: String!
}

type PokemonTypeSubscriptionPayload {
  mutation: MutationType!
  node: PokemonType
  updatedFields: [String!]
  previousValues: PokemonTypePreviousValues
}

input PokemonTypeSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [PokemonTypeSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [PokemonTypeSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PokemonTypeSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PokemonTypeWhereInput
}

input PokemonTypeUpdateDataInput {
  english: String
  chinese: String
  japanese: String
}

input PokemonTypeUpdateInput {
  english: String
  chinese: String
  japanese: String
}

input PokemonTypeUpdateManyInput {
  create: [PokemonTypeCreateInput!]
  connect: [PokemonTypeWhereUniqueInput!]
  disconnect: [PokemonTypeWhereUniqueInput!]
  delete: [PokemonTypeWhereUniqueInput!]
  update: [PokemonTypeUpdateWithWhereUniqueNestedInput!]
  upsert: [PokemonTypeUpsertWithWhereUniqueNestedInput!]
}

input PokemonTypeUpdateOneRequiredInput {
  create: PokemonTypeCreateInput
  connect: PokemonTypeWhereUniqueInput
  update: PokemonTypeUpdateDataInput
  upsert: PokemonTypeUpsertNestedInput
}

input PokemonTypeUpdateWithWhereUniqueNestedInput {
  where: PokemonTypeWhereUniqueInput!
  data: PokemonTypeUpdateDataInput!
}

input PokemonTypeUpsertNestedInput {
  update: PokemonTypeUpdateDataInput!
  create: PokemonTypeCreateInput!
}

input PokemonTypeUpsertWithWhereUniqueNestedInput {
  where: PokemonTypeWhereUniqueInput!
  update: PokemonTypeUpdateDataInput!
  create: PokemonTypeCreateInput!
}

input PokemonTypeWhereInput {
  """Logical AND on all given filters."""
  AND: [PokemonTypeWhereInput!]

  """Logical OR on all given filters."""
  OR: [PokemonTypeWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PokemonTypeWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  english: String

  """All values that are not equal to given value."""
  english_not: String

  """All values that are contained in given list."""
  english_in: [String!]

  """All values that are not contained in given list."""
  english_not_in: [String!]

  """All values less than the given value."""
  english_lt: String

  """All values less than or equal the given value."""
  english_lte: String

  """All values greater than the given value."""
  english_gt: String

  """All values greater than or equal the given value."""
  english_gte: String

  """All values containing the given string."""
  english_contains: String

  """All values not containing the given string."""
  english_not_contains: String

  """All values starting with the given string."""
  english_starts_with: String

  """All values not starting with the given string."""
  english_not_starts_with: String

  """All values ending with the given string."""
  english_ends_with: String

  """All values not ending with the given string."""
  english_not_ends_with: String
  chinese: String

  """All values that are not equal to given value."""
  chinese_not: String

  """All values that are contained in given list."""
  chinese_in: [String!]

  """All values that are not contained in given list."""
  chinese_not_in: [String!]

  """All values less than the given value."""
  chinese_lt: String

  """All values less than or equal the given value."""
  chinese_lte: String

  """All values greater than the given value."""
  chinese_gt: String

  """All values greater than or equal the given value."""
  chinese_gte: String

  """All values containing the given string."""
  chinese_contains: String

  """All values not containing the given string."""
  chinese_not_contains: String

  """All values starting with the given string."""
  chinese_starts_with: String

  """All values not starting with the given string."""
  chinese_not_starts_with: String

  """All values ending with the given string."""
  chinese_ends_with: String

  """All values not ending with the given string."""
  chinese_not_ends_with: String
  japanese: String

  """All values that are not equal to given value."""
  japanese_not: String

  """All values that are contained in given list."""
  japanese_in: [String!]

  """All values that are not contained in given list."""
  japanese_not_in: [String!]

  """All values less than the given value."""
  japanese_lt: String

  """All values less than or equal the given value."""
  japanese_lte: String

  """All values greater than the given value."""
  japanese_gt: String

  """All values greater than or equal the given value."""
  japanese_gte: String

  """All values containing the given string."""
  japanese_contains: String

  """All values not containing the given string."""
  japanese_not_contains: String

  """All values starting with the given string."""
  japanese_starts_with: String

  """All values not starting with the given string."""
  japanese_not_starts_with: String

  """All values ending with the given string."""
  japanese_ends_with: String

  """All values not ending with the given string."""
  japanese_not_ends_with: String
}

input PokemonTypeWhereUniqueInput {
  id: ID
  english: String
}

input PokemonUpdateInput {
  pokedexNumber: Int
  nameSearch: String
  name: MultiLangUpdateOneRequiredInput
  types: PokemonTypeUpdateManyInput
  base: PokemonBaseStatsUpdateOneRequiredInput
}

input PokemonWhereInput {
  """Logical AND on all given filters."""
  AND: [PokemonWhereInput!]

  """Logical OR on all given filters."""
  OR: [PokemonWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PokemonWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  pokedexNumber: Int

  """All values that are not equal to given value."""
  pokedexNumber_not: Int

  """All values that are contained in given list."""
  pokedexNumber_in: [Int!]

  """All values that are not contained in given list."""
  pokedexNumber_not_in: [Int!]

  """All values less than the given value."""
  pokedexNumber_lt: Int

  """All values less than or equal the given value."""
  pokedexNumber_lte: Int

  """All values greater than the given value."""
  pokedexNumber_gt: Int

  """All values greater than or equal the given value."""
  pokedexNumber_gte: Int
  nameSearch: String

  """All values that are not equal to given value."""
  nameSearch_not: String

  """All values that are contained in given list."""
  nameSearch_in: [String!]

  """All values that are not contained in given list."""
  nameSearch_not_in: [String!]

  """All values less than the given value."""
  nameSearch_lt: String

  """All values less than or equal the given value."""
  nameSearch_lte: String

  """All values greater than the given value."""
  nameSearch_gt: String

  """All values greater than or equal the given value."""
  nameSearch_gte: String

  """All values containing the given string."""
  nameSearch_contains: String

  """All values not containing the given string."""
  nameSearch_not_contains: String

  """All values starting with the given string."""
  nameSearch_starts_with: String

  """All values not starting with the given string."""
  nameSearch_not_starts_with: String

  """All values ending with the given string."""
  nameSearch_ends_with: String

  """All values not ending with the given string."""
  nameSearch_not_ends_with: String
  name: MultiLangWhereInput
  types_every: PokemonTypeWhereInput
  types_some: PokemonTypeWhereInput
  types_none: PokemonTypeWhereInput
  base: PokemonBaseStatsWhereInput
}

input PokemonWhereUniqueInput {
  id: ID
  pokedexNumber: Int
}

type Query {
  pokemons(where: PokemonWhereInput, orderBy: PokemonOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Pokemon]!
  pokemonSkills(where: PokemonSkillWhereInput, orderBy: PokemonSkillOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PokemonSkill]!
  items(where: ItemWhereInput, orderBy: ItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Item]!
  pokemonBaseStatses(where: PokemonBaseStatsWhereInput, orderBy: PokemonBaseStatsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PokemonBaseStats]!
  pokemonTypes(where: PokemonTypeWhereInput, orderBy: PokemonTypeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PokemonType]!
  multiLangs(where: MultiLangWhereInput, orderBy: MultiLangOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [MultiLang]!
  pokemon(where: PokemonWhereUniqueInput!): Pokemon
  pokemonSkill(where: PokemonSkillWhereUniqueInput!): PokemonSkill
  item(where: ItemWhereUniqueInput!): Item
  pokemonType(where: PokemonTypeWhereUniqueInput!): PokemonType
  pokemonsConnection(where: PokemonWhereInput, orderBy: PokemonOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PokemonConnection!
  pokemonSkillsConnection(where: PokemonSkillWhereInput, orderBy: PokemonSkillOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PokemonSkillConnection!
  itemsConnection(where: ItemWhereInput, orderBy: ItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ItemConnection!
  pokemonBaseStatsesConnection(where: PokemonBaseStatsWhereInput, orderBy: PokemonBaseStatsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PokemonBaseStatsConnection!
  pokemonTypesConnection(where: PokemonTypeWhereInput, orderBy: PokemonTypeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PokemonTypeConnection!
  multiLangsConnection(where: MultiLangWhereInput, orderBy: MultiLangOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): MultiLangConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Subscription {
  pokemon(where: PokemonSubscriptionWhereInput): PokemonSubscriptionPayload
  pokemonSkill(where: PokemonSkillSubscriptionWhereInput): PokemonSkillSubscriptionPayload
  item(where: ItemSubscriptionWhereInput): ItemSubscriptionPayload
  pokemonBaseStats(where: PokemonBaseStatsSubscriptionWhereInput): PokemonBaseStatsSubscriptionPayload
  pokemonType(where: PokemonTypeSubscriptionWhereInput): PokemonTypeSubscriptionPayload
  multiLang(where: MultiLangSubscriptionWhereInput): MultiLangSubscriptionPayload
}
